name: .NET

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'src/StreamStruct/StreamStruct.csproj'
  TEST_PATH: 'src/StreamStruct.Tests/StreamStruct.Tests.csproj'

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
      nuget-artifact-name: ${{ steps.upload-nuget.outputs.artifact-name }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.*'
        source-url: https://api.nuget.org/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
    
    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
    
    - name: Test
      run: dotnet test ${{ env.TEST_PATH }} --configuration Release --no-build --verbosity normal
    
    - name: Create NuGet packages
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --output ${{ github.workspace }}/packages
        
    - name: Publish to NuGet
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: dotnet nuget push ${{ github.workspace }}/packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate

    - name: Generate Release Notes
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using all commits"
          COMMIT_RANGE=""
        else
          echo "Previous tag: $PREVIOUS_TAG"
          COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
        fi
        
        # Generate changelog
        echo "## Release Notes" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits with their messages
        if [ -n "$COMMIT_RANGE" ]; then
          git log $COMMIT_RANGE --oneline --no-merges --pretty=format:"- %s" >> release_notes.md
        else
          git log --oneline --no-merges --pretty=format:"- %s" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Pull Request Merges" >> release_notes.md
        echo "" >> release_notes.md
        
        # Get merge commits (PR merges)
        if [ -n "$COMMIT_RANGE" ]; then
          MERGE_COMMITS=$(git log $COMMIT_RANGE --merges --pretty=format:"- %s" | head -20)
        else
          MERGE_COMMITS=$(git log --merges --pretty=format:"- %s" | head -20)
        fi
        
        if [ -n "$MERGE_COMMITS" ]; then
          echo "$MERGE_COMMITS" >> release_notes.md
        else
          echo "- No pull request merges in this release" >> release_notes.md
        fi
        
        # Read the release notes and set as output
        RELEASE_NOTES=$(cat release_notes.md)
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ github.workspace }}/packages/*
        name: Release ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
